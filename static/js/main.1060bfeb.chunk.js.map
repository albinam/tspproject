{"version":3,"sources":["ga/GA.js","Map/Marker.js","ga/TSP.js","App.js","reportWebVitals.js","index.js"],"names":["distance","x1","y1","x2","y2","dLat","Math","PI","dLng","a","sin","cos","d","atan2","sqrt","round","calculateFitness","graph","chromosome","totalDist","i","path","length","lat","lng","shuffleArray","array","j","floor","random","temp","getInitialGeneration","n","points","population","Array","from","_","fitness","unshift","push","crossingover","newPopulation","l","p1","p2","chromosomeLength","childPath","fill","randomArraySelector","slice","sort","vis","k","childChromosome","mutation","mutatedPopulation","b","GA","generations","initialPopulation","gen","concat","splice","result","size","Marker","index","className","Option","Select","TSP","useState","gaSteps","setGASteps","status","setStatus","speed","setSpeed","setGenerations","setInitialPopulation","data","setData","map","setMap","maps","setMaps","dur","setDuration","dis","setDistance","travelMode","setTravelMode","markers","setMarker","useEffect","localeCompare","interval","setInterval","next","done","state","value","clearInterval","min","max","onChange","val","defaultValue","type","disabled","onClick","e","preventDefault","style","height","width","bootstrapURLKeys","key","process","center","defaultZoom","ev","coords","id","alert","window","location","reload","onGoogleApiLoaded","onMapLoaded","obj","markersDisplay","paths","Polyline","geodesic","strokeColor","strokeOpacity","strokeWeight","plot","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","setOptions","suppressMarkers","waypts","stopover","request","origin","destination","waypoints","avoidHighways","avoidTolls","optimizeWaypoints","provideRouteAlternatives","duration","route","response","DirectionsStatus","OK","setDirections","routes","legs","resp","parseInt","ceil","getPath","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.1060bfeb.chunk.js","sourcesContent":["const distance = (x1, y1, x2, y2) => {\r\n    let R = 6378137;\r\n    let dLat = (x2-x1) * Math.PI / 180;\r\n    let dLng = (y1-y2) * Math.PI / 180;\r\n    let a = Math.sin(dLat/2) * Math.sin(dLat/2) +\r\n        Math.cos(x1 * Math.PI / 180 ) * Math.cos(x2 * Math.PI / 180 ) *\r\n        Math.sin(dLng/2) * Math.sin(dLng/2);\r\n    let c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a));\r\n    let d = R * c;\r\n    return Math.round(d);\r\n};\r\nconst calculateFitness = (graph, chromosome) => {\r\n    let totalDist = 0;\r\n    for (let i = 0; i < chromosome.path.length - 1; i++) {\r\n        if (graph[chromosome.path[i]] && graph[chromosome.path[i + 1]]) {\r\n            totalDist += distance(graph[chromosome.path[i]]?.lat, graph[chromosome.path[i]]?.lng, graph[chromosome.path[i + 1]]?.lat, graph[chromosome.path[i + 1]]?.lng);\r\n        }\r\n    }\r\n    return totalDist;\r\n};\r\n\r\nfunction shuffleArray(array) {\r\n    for (let i = array.length - 1; i > 0; i--) {\r\n        let j = Math.floor(Math.random() * (i + 1));\r\n        let temp = array[i];\r\n        array[i] = array[j];\r\n        array[j] = temp;\r\n    }\r\n    return array;\r\n}\r\n\r\nconst getInitialGeneration = (n, points, graph) => {\r\n    const population = [];\r\n    for (let i = 0; i < n; i++) {\r\n        const chromosome = {\r\n            path: shuffleArray(Array.from({length: points - 1}, (_, i) => i + 1)),\r\n            fitness: 0,\r\n        };\r\n        chromosome.path.unshift(0);\r\n        chromosome.path.push(0);\r\n        chromosome.fitness = calculateFitness(graph, chromosome);\r\n        population.push({...chromosome});\r\n    }\r\n    return population;\r\n};\r\n//скрещивание\r\nconst crossingover = (population, graph) => {\r\n    population = shuffleArray(population);\r\n    const newPopulation = [];\r\n    const l = population.length;\r\n    for (let i = 0; i < l / 2; i++) {\r\n        //берём симметричные хромосомы в родительской популяции\r\n        const p1 = population[i];\r\n        const p2 = population[l - i - 1];\r\n        const chromosomeLength = p1.path.length;\r\n        //новая хромосома\r\n        const childPath = new Array(p1.path.length).fill(-1);\r\n        //создаем радномный массив индексов\r\n        let randomArraySelector = shuffleArray(\r\n            Array.from({length: chromosomeLength - 2}, (_, i) => i + 1)\r\n        );\r\n        //делим его пополам\r\n        randomArraySelector = randomArraySelector.slice(\r\n            randomArraySelector.length / 2\r\n        );\r\n\r\n        //сортируем\r\n        randomArraySelector.sort();\r\n        const vis = Array(chromosomeLength).fill(false);\r\n        //заполняем по найденным рандомным индексам новую хромосому из первой родительской\r\n        for (let j = 1; j < randomArraySelector.length; j++) {\r\n            childPath[randomArraySelector[j]] = p1.path[randomArraySelector[j]];\r\n            vis[p1.path[randomArraySelector[j]]] = true;\r\n        }\r\n        //там где не заполнили дополняем второй родительской хромосомой\r\n        let k = 0;\r\n        let j = 0;\r\n        while (j < chromosomeLength - 1) {\r\n            if (childPath[j] === -1) {\r\n                if (!vis[p2.path[k]]) {\r\n                    childPath[j] = p2.path[k];\r\n                    j++;\r\n                    k++;\r\n                } else {\r\n                    k++;\r\n                }\r\n            } else {\r\n                j++;\r\n            }\r\n        }\r\n        //возвращаемся в точку отправки\r\n        childPath[chromosomeLength - 1] = 0;\r\n        //добавили к хромосоме расчет фитнес функциии\r\n        const childChromosome = {path: childPath, fitness: 0};\r\n        childChromosome.fitness = calculateFitness(graph, childChromosome);\r\n        newPopulation.push(childChromosome);\r\n    }\r\n\r\n    return newPopulation;\r\n};\r\n//мутация\r\nconst mutation = (newPopulation, graph) => {\r\n    const mutatedPopulation = [];\r\n    let l = newPopulation.length;\r\n    //записали популяцию до мутации\r\n    for (let i = 0; i < l; i++) {\r\n        mutatedPopulation.push({path: [...newPopulation[i].path], fitness: 0});\r\n    }\r\n    for (let i = 0; i < l; i++) {\r\n        const chromosomeLength = mutatedPopulation[i].path.length;\r\n        //рассчитываем два рандомных индекса и меняем местами номера пунктов по этим индексам\r\n        const a = Math.floor(Math.random() * (chromosomeLength - 3)) + 1;\r\n        const b = Math.floor(Math.random() * (chromosomeLength - 3)) + 1;\r\n        const temp = mutatedPopulation[i].path[a];\r\n        mutatedPopulation[i].path[a] = mutatedPopulation[i].path[b];\r\n        mutatedPopulation[i].path[b] = temp;\r\n        mutatedPopulation[i].fitness = calculateFitness(\r\n            graph,\r\n            mutatedPopulation[i]\r\n        );\r\n    }\r\n    return mutatedPopulation;\r\n};\r\n\r\nconst GA = function* (points, graph, generations, initialPopulation) {\r\n    let population = getInitialGeneration(initialPopulation, points, graph);\r\n    for (let gen = 0; gen < generations; gen++) {\r\n        //скрещивание\r\n        const newPopulation = crossingover(population, graph);\r\n\r\n        //мутация\r\n        const mutatedPopulation = mutation(newPopulation, graph);\r\n        population = population.concat(mutatedPopulation);\r\n\r\n        //отбор\r\n        population.sort((a, b) => {\r\n            if (a.fitness < b.fitness) return -1;\r\n            if (a.fitness > b.fitness) return 1;\r\n            return 0;\r\n        });\r\n        population = population.splice(0, initialPopulation);\r\n        yield {result: population[0], size: population.length, gen};\r\n    }\r\n};\r\n\r\nexport default GA;\r\n","import React from 'react';\r\nimport './Marker.scss';\r\n\r\nfunction Marker({index}) {\r\n\r\n    return (\r\n        <div className=\"location-map_marker\">\r\n            <div className=\"location-map_marker_index\">{index}</div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Marker;","import React, {useEffect, useState} from \"react\";\r\nimport {Slider, Button, Select} from 'antd';\r\nimport GA from \"./GA\";\r\nimport Marker from \"../Map/Marker\";\r\nimport \"./TSP.scss\"\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nconst {Option} = Select;\r\n\r\nfunction TSP() {\r\n    const [gaSteps, setGASteps] = useState(null);\r\n    const [status, setStatus] = useState(\"Paused\");\r\n    const [speed, setSpeed] = useState(300);\r\n    const [generations, setGenerations] = useState(20);\r\n    const [initialPopulation, setInitialPopulation] = useState(10);\r\n    const [data, setData] = useState(null);\r\n    const [map, setMap] = useState();\r\n    const [maps, setMaps] = useState();\r\n    const [dur, setDuration] = useState();\r\n    const [dis, setDistance] = useState();\r\n    const [travelMode, setTravelMode] = useState(\"DRIVING\");\r\n    const [markers, setMarker] = useState([]);\r\n    const key = process.env.REACT_APP_GOOGLE_MAPS_API;\r\n    const defaultZoom = 15;\r\n\r\n    const onClick = (coords) => {\r\n        setMarker([...markers, {id: markers.length, lat: coords.lat, lng: coords.lng}])\r\n        if (markers.length > 8) {\r\n            alert(\"Максимально можно добавить только 9 точек\")\r\n            window.location.reload()\r\n        }\r\n    }\r\n\r\n    function onMapLoaded(map, maps) {\r\n        setMap(map);\r\n        setMaps(maps);\r\n    }\r\n\r\n    function getPath(result, graph) {\r\n        let directionsService = new maps.DirectionsService();\r\n        let directionsDisplay = new maps.DirectionsRenderer();\r\n        directionsDisplay.setOptions({suppressMarkers: true});\r\n        let waypts = [];\r\n        let l = result ? result.length : 0;\r\n        for (let i = 0; i < l - 1; i++) {\r\n            waypts.push({\r\n                location: graph[result[i]],\r\n                stopover: true\r\n            });\r\n        }\r\n        let request = {\r\n            origin: graph[result[0]],\r\n            destination: graph[result[0]],\r\n            waypoints: waypts,\r\n            travelMode: travelMode,\r\n            avoidHighways: false,\r\n            avoidTolls: false,\r\n            optimizeWaypoints: false,\r\n            provideRouteAlternatives: true\r\n        };\r\n        let duration = 0;\r\n        let distance = 0;\r\n        directionsService.route(request, function (response, status) {\r\n            if (status === maps.DirectionsStatus.OK) {\r\n                directionsDisplay.setDirections(response);\r\n                response.routes[0].legs.map(resp => {\r\n                    duration = duration + parseInt(resp.duration.value);\r\n                    distance = distance + parseInt(resp.distance.value);\r\n                })\r\n            }\r\n            setDuration(Math.ceil(duration / 60));\r\n            setDistance(distance)\r\n        });\r\n        directionsDisplay.setMap(map);\r\n    }\r\n\r\n    function markersDisplay() {\r\n        if (markers && markers.length <= 9) {\r\n            return markers.map((obj, index) => (\r\n                <Marker key={index} index={index} lat={obj.lat} lng={obj.lng}/>\r\n            ));\r\n        }\r\n    }\r\n\r\n    const handleClick = () => {\r\n        status.localeCompare(\"Playing\") === 0\r\n            ? setStatus(\"Paused\")\r\n            : setStatus(\"Playing\");\r\n    }\r\n\r\n    const plot = (graph, result) => {\r\n        if (markers) {\r\n            let l = result ? result.length : 0;\r\n            for (let i = 0; i < l - 1; i++) {\r\n                const paths = [{lat: graph[result[i]]?.lat, lng: graph[result[i]]?.lng}, {\r\n                    lat: graph[result[i + 1]]?.lat,\r\n                    lng: graph[result[i + 1]]?.lng\r\n                }];\r\n\r\n                let nonGeodesicPolyline = new maps.Polyline({\r\n                    path: paths,\r\n                    geodesic: false,\r\n                    strokeColor: \"#430284\",\r\n                    strokeOpacity: 0.7,\r\n                    strokeWeight: 3\r\n                })\r\n                nonGeodesicPolyline.setMap(map)\r\n            }\r\n        }\r\n    }\r\n\r\n    useEffect(() => {\r\n        setGASteps(GA(markers.length, markers, generations, initialPopulation));\r\n    }, [generations, initialPopulation, markers]);\r\n\r\n    useEffect(() => {\r\n        if (gaSteps != null && status.localeCompare(\"Playing\") === 0) {\r\n            const interval = setInterval(() => {\r\n                const next = gaSteps.next();\r\n                if (next.done) {\r\n                    setStatus(\"Paused\");\r\n                    setGASteps(\r\n                        GA(markers.length, markers, generations, initialPopulation)\r\n                    );\r\n                    return;\r\n                }\r\n                const state = next.value;\r\n                setData(state);\r\n            }, speed);\r\n            return () => {\r\n                clearInterval(interval);\r\n            };\r\n        }\r\n    }, [\r\n        gaSteps,\r\n        markers,\r\n        status,\r\n        speed,\r\n        initialPopulation,\r\n        generations\r\n    ]);\r\n\r\n    return (\r\n        <div className=\"main-container\">\r\n            <div className=\"main-container_params\">\r\n                <h3>Решение задачи коммивояжера генетическим алгоритмом</h3>\r\n                <div className=\"main-container_slider\">\r\n                    <div>Количество поколений: {generations}</div>\r\n                    <Slider\r\n                        min={1}\r\n                        max={100}\r\n                        onChange={(val) => {\r\n                            setGenerations(val);\r\n                        }}\r\n                        value={generations}\r\n                    />\r\n                </div>\r\n                <div className=\"main-container_slider\">\r\n                    <div>Начальная популяция: {initialPopulation}</div>\r\n                    <Slider\r\n                        min={1}\r\n                        max={100}\r\n                        onChange={(val) => {\r\n                            setInitialPopulation(val);\r\n                        }}\r\n                        value={initialPopulation}\r\n                    />\r\n                </div>\r\n                <div className=\"main-container_slider\">\r\n                    <div>Скорость: {speed}</div>\r\n                    <Slider\r\n                        min={100}\r\n                        max={2000}\r\n                        value={speed}\r\n                        onChange={(val) => {\r\n                            setSpeed(val);\r\n                        }}\r\n                    />\r\n                </div>\r\n                <div>Способ передвижения</div>\r\n                <Select defaultValue=\"DRIVING\" onChange={(value) => {\r\n                    setTravelMode(value);\r\n                }}>\r\n                    <Option value=\"DRIVING\">На машине</Option>\r\n                    <Option value=\"WALKING\">Пешком</Option>\r\n                </Select>\r\n                <h4>Расстояние, рассчитанное по генетическому алгоритму: {data?.result?.fitness} м</h4>\r\n                <h4>Время в пути: {dur} мин</h4>\r\n                <h4>Расстояние по карте: {dis} м</h4>\r\n                <h4>Найденная последовательность точек: {data?.result?.path}</h4>\r\n                <Button type=\"primary\"\r\n                        disabled={status.localeCompare(\"Playing\") === 0}\r\n                        onClick={(e) => {\r\n                            e.preventDefault();\r\n                            handleClick()\r\n                        }}\r\n                >Начать</Button>\r\n            </div>\r\n            <div className=\"main-container_map\" style={{height: '100vh', width: '100%'}}>\r\n                <GoogleMapReact\r\n                    bootstrapURLKeys={{key: key}}\r\n                    center={{\r\n                        lat: 54.3399097,\r\n                        lng: 48.3826817\r\n                    }}\r\n                    defaultZoom={defaultZoom}\r\n                    onClick={ev => onClick(ev)}\r\n                    onGoogleApiLoaded={({map, maps}) => onMapLoaded(map, maps)}>\r\n                    {markersDisplay()}\r\n                    {(data?.result?.path && status.localeCompare(\"Paused\") === 0) ? plot(markers, data.result.path) : null}\r\n                    {(data?.result?.path && status.localeCompare(\"Paused\") === 0) ? getPath(data?.result?.path, markers) : null}\r\n                </GoogleMapReact>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default TSP;\r\n","import './App.css';\nimport TSP from \"./ga/TSP\";\nimport 'antd/dist/antd.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <TSP/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}